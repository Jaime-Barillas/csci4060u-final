{:tasks
 {:requires ([babashka.fs :as fs]
             [babashka.process :as proc]
             [babashka.cli :as cli])

  :init (def opts
          (cli/parse-opts
            *command-line-args*
            {:spec {:release {:coerce :boolean}}}))

  -build-type (if (:release opts) "release" "debug")

  setup
  {:doc "Run project setup (args: --release)"
   :depends [-build-type]
   :task (let [build-path (fs/path "build" -build-type)]
           (try
             (proc/shell "meson" "setup" build-path)
             (when (= -build-type "release")
               (proc/shell
                 "meson" "configure" build-path "-Dbuildtype=release"))
             (catch Exception ex
               (println (ex-message ex))
               (System/exit 1))))}

  build
  {:doc "Compile the program (args: --release)"
   :depends [-build-type]
   :task (if (seq (fs/modified-since
                    (fs/file "build" -build-type "fluid-sim-sph")
                    "fluid-sim-sph"))
           (try
             (proc/shell
               "meson" "compile" "-C" (fs/path "./build" -build-type))
             (catch Exception ex
               (println (ex-message ex))
               (System/exit 1))))}

  exe
  {:doc "Run the program (args: --release)"
   :depends [-build-type]
   :task (try
           (proc/shell
             (fs/path "build" -build-type "fluid-sim-sph"))
             (catch Exception ex
               (println (ex-message ex))
               (System/exit 1)))}

  ,}}
